// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pb/event_service.proto

/*
Package event_service is a generated protocol buffer package.

It is generated from these files:
	pb/event_service.proto

It has these top-level messages:
	Event
	EventRequest
	EventResponse
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Event struct {
	EventName   string            `protobuf:"bytes,1,opt,name=event_name,json=eventName" json:"event_name,omitempty"`
	EventTarget string            `protobuf:"bytes,2,opt,name=event_target,json=eventTarget" json:"event_target,omitempty"`
	UserId      string            `protobuf:"bytes,3,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	CreatedAt   int32             `protobuf:"varint,4,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
	Params      map[string]string `protobuf:"bytes,5,rep,name=params" json:"params,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Event) Reset()                    { *m = Event{} }
func (m *Event) String() string            { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()               {}
func (*Event) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Event) GetEventName() string {
	if m != nil {
		return m.EventName
	}
	return ""
}

func (m *Event) GetEventTarget() string {
	if m != nil {
		return m.EventTarget
	}
	return ""
}

func (m *Event) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *Event) GetCreatedAt() int32 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *Event) GetParams() map[string]string {
	if m != nil {
		return m.Params
	}
	return nil
}

type EventRequest struct {
	UserToken string `protobuf:"bytes,1,opt,name=user_token,json=userToken" json:"user_token,omitempty"`
	RKey      string `protobuf:"bytes,2,opt,name=r_key,json=rKey" json:"r_key,omitempty"`
	Event     *Event `protobuf:"bytes,3,opt,name=event" json:"event,omitempty"`
}

func (m *EventRequest) Reset()                    { *m = EventRequest{} }
func (m *EventRequest) String() string            { return proto.CompactTextString(m) }
func (*EventRequest) ProtoMessage()               {}
func (*EventRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *EventRequest) GetUserToken() string {
	if m != nil {
		return m.UserToken
	}
	return ""
}

func (m *EventRequest) GetRKey() string {
	if m != nil {
		return m.RKey
	}
	return ""
}

func (m *EventRequest) GetEvent() *Event {
	if m != nil {
		return m.Event
	}
	return nil
}

type EventResponse struct {
	IsOk   bool   `protobuf:"varint,1,opt,name=is_ok,json=isOk" json:"is_ok,omitempty"`
	Status string `protobuf:"bytes,2,opt,name=status" json:"status,omitempty"`
}

func (m *EventResponse) Reset()                    { *m = EventResponse{} }
func (m *EventResponse) String() string            { return proto.CompactTextString(m) }
func (*EventResponse) ProtoMessage()               {}
func (*EventResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *EventResponse) GetIsOk() bool {
	if m != nil {
		return m.IsOk
	}
	return false
}

func (m *EventResponse) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func init() {
	proto.RegisterType((*Event)(nil), "Event")
	proto.RegisterType((*EventRequest)(nil), "EventRequest")
	proto.RegisterType((*EventResponse)(nil), "EventResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for EventMapper service

type EventMapperClient interface {
	CreateEvent(ctx context.Context, in *EventRequest, opts ...grpc.CallOption) (*EventResponse, error)
}

type eventMapperClient struct {
	cc *grpc.ClientConn
}

func NewEventMapperClient(cc *grpc.ClientConn) EventMapperClient {
	return &eventMapperClient{cc}
}

func (c *eventMapperClient) CreateEvent(ctx context.Context, in *EventRequest, opts ...grpc.CallOption) (*EventResponse, error) {
	out := new(EventResponse)
	err := grpc.Invoke(ctx, "/EventMapper/CreateEvent", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for EventMapper service

type EventMapperServer interface {
	CreateEvent(context.Context, *EventRequest) (*EventResponse, error)
}

func RegisterEventMapperServer(s *grpc.Server, srv EventMapperServer) {
	s.RegisterService(&_EventMapper_serviceDesc, srv)
}

func _EventMapper_CreateEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventMapperServer).CreateEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/EventMapper/CreateEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventMapperServer).CreateEvent(ctx, req.(*EventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _EventMapper_serviceDesc = grpc.ServiceDesc{
	ServiceName: "EventMapper",
	HandlerType: (*EventMapperServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateEvent",
			Handler:    _EventMapper_CreateEvent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/event_service.proto",
}

func init() { proto.RegisterFile("pb/event_service.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 329 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x91, 0x4f, 0x4b, 0xf3, 0x40,
	0x10, 0xc6, 0xdf, 0xb4, 0x4d, 0x5e, 0x3b, 0x69, 0x45, 0x56, 0xa9, 0xa1, 0x28, 0xd4, 0x9c, 0x8a,
	0x87, 0x08, 0xf5, 0xa2, 0xa2, 0x07, 0x91, 0x1e, 0x44, 0xfc, 0xc3, 0xd2, 0x7b, 0xdc, 0xb6, 0x83,
	0x84, 0xd8, 0x64, 0xdd, 0xdd, 0x14, 0xf2, 0x8d, 0xfd, 0x18, 0xb2, 0xb3, 0x2b, 0xd4, 0x5b, 0xe6,
	0x37, 0x93, 0x67, 0x9e, 0x67, 0x07, 0x46, 0x72, 0x79, 0x81, 0x5b, 0xac, 0x4c, 0xae, 0x51, 0x6d,
	0x8b, 0x15, 0x66, 0x52, 0xd5, 0xa6, 0x4e, 0xbf, 0x03, 0x08, 0xe7, 0x96, 0xb3, 0x53, 0x00, 0x37,
	0x50, 0x89, 0x0d, 0x26, 0xc1, 0x24, 0x98, 0xf6, 0x79, 0x9f, 0xc8, 0x8b, 0xd8, 0x20, 0x3b, 0x83,
	0x81, 0x6b, 0x1b, 0xa1, 0x3e, 0xd0, 0x24, 0x1d, 0x1a, 0x88, 0x89, 0x2d, 0x08, 0xb1, 0x63, 0xf8,
	0xdf, 0x68, 0x54, 0x79, 0xb1, 0x4e, 0xba, 0xd4, 0x8d, 0x6c, 0xf9, 0xb8, 0xb6, 0xd2, 0x2b, 0x85,
	0xc2, 0xe0, 0x3a, 0x17, 0x26, 0xe9, 0x4d, 0x82, 0x69, 0xc8, 0xfb, 0x9e, 0xdc, 0x1b, 0x76, 0x0e,
	0x91, 0x14, 0x4a, 0x6c, 0x74, 0x12, 0x4e, 0xba, 0xd3, 0x78, 0xc6, 0x32, 0x72, 0x94, 0xbd, 0x11,
	0x9c, 0x57, 0x46, 0xb5, 0xdc, 0x4f, 0x8c, 0xaf, 0x21, 0xde, 0xc1, 0xec, 0x00, 0xba, 0x25, 0xb6,
	0xde, 0xad, 0xfd, 0x64, 0x47, 0x10, 0x6e, 0xc5, 0x67, 0x83, 0xde, 0xa0, 0x2b, 0x6e, 0x3a, 0x57,
	0x41, 0xfa, 0x0e, 0x03, 0xd2, 0xe5, 0xf8, 0xd5, 0xa0, 0xa6, 0xc0, 0x64, 0xd7, 0xd4, 0x25, 0x56,
	0xbf, 0x81, 0x2d, 0x59, 0x58, 0xc0, 0x0e, 0x21, 0x54, 0xb9, 0x15, 0x77, 0x42, 0x3d, 0xf5, 0x84,
	0x2d, 0x3b, 0x81, 0x90, 0x12, 0x53, 0xc0, 0x78, 0x16, 0x39, 0xa7, 0xdc, 0xc1, 0xf4, 0x16, 0x86,
	0x7e, 0x83, 0x96, 0x75, 0xa5, 0xd1, 0x6a, 0x14, 0x3a, 0xaf, 0x4b, 0x52, 0xdf, 0xe3, 0xbd, 0x42,
	0xbf, 0x96, 0x6c, 0x04, 0x91, 0x36, 0xc2, 0x34, 0xda, 0x2b, 0xfb, 0x6a, 0x76, 0x07, 0x31, 0xfd,
	0xfd, 0x2c, 0xa4, 0x44, 0xc5, 0x32, 0x88, 0x1f, 0xe8, 0x89, 0xdc, 0x79, 0x86, 0xd9, 0xae, 0xf9,
	0xf1, 0x7e, 0xf6, 0x67, 0x53, 0xfa, 0x6f, 0x19, 0xd1, 0x41, 0x2f, 0x7f, 0x02, 0x00, 0x00, 0xff,
	0xff, 0x3a, 0x20, 0x17, 0x6c, 0xea, 0x01, 0x00, 0x00,
}
